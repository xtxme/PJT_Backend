import { Router } from "express";
import { dbClient } from "@db/client.js";
import { products } from "@db/schema.js";
import { eq } from "drizzle-orm";

const router = Router();

/* ============================
   üì¶ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å)
============================ */
router.get("/stock", async (_req, res, next) => {
    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á products
        const result = await dbClient
            .select({
                id: products.id,
                image: products.image,
                name: products.name,
                company: products.company,
                lastUpdate: products.last_counted_at,
                systemQty: products.quantity,
                latestQty: products.counted_qty,
            })
            .from(products);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° field "match" (true ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô)
        const formatted = result.map((p) => ({
            ...p,
            newQty: p.latestQty ?? 0,
            match: p.systemQty === p.latestQty,
        }));

        res.json(formatted);
    } catch (err) {
        next(err);
    }
});

/* ============================
   üßÆ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á (counted_qty)
   ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡∏Å‡∏î ‚Äú‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‚Äù
============================ */
router.put("/stock/:id", async (req, res, next) => {
    try {
        const { id } = req.params;
        const { counted_qty, count_note } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        if (counted_qty == null || isNaN(Number(counted_qty))) {
            return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç" });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const updated = await dbClient
            .update(products)
            .set({
                counted_qty: Number(counted_qty),
                last_counted_at: new Date(),
                count_note: count_note ?? null,
            })
            .where(eq(products.id, id));

        if (updated[0].affectedRows === 0) {
            return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ" });
        }

        res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", product_id: id });
    } catch (err) {
        next(err);
    }
});

export default router;
